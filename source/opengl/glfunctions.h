/*
 *  Copyright (C) 2012-2025  The BoxedWine Team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

GL_FUNCTION(LogicOp, void, (GLenum opcode), (ARG1),,,("glLogicOp"))
GL_FUNCTION(ClearIndex, void, (GLfloat c), (fARG1),,,("glClearIndex"))
GL_FUNCTION(ClearColor, void, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha), (fARG1, fARG2, fARG3, fARG4),,,("glClearColor"))
GL_FUNCTION_FMT(Clear, void, (GLbitfield mask), (ARG1),,,("glClear %s", glcommon_glClear_mask(ARG1)))
GL_FUNCTION(IndexMask, void, (GLuint mask), (ARG1),,,("glIndexMask"))
GL_FUNCTION(ColorMask, void, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColorMask"))
GL_FUNCTION(AlphaFunc, void, (GLenum func, GLclampf ref), (ARG1, fARG2),,,("glAlphaFunc"))
GL_FUNCTION(BlendFunc, void, (GLenum sfactor, GLenum dfactor), (ARG1, ARG2),,,("glBlendFunc"))
GL_FUNCTION(CullFace, void, (GLenum mode), (ARG1),,,("glCullFace"))
GL_FUNCTION(FrontFace, void, (GLenum mode), (ARG1),,,("glFrontFace"))
GL_FUNCTION(PointSize, void, (GLfloat size), (fARG1),,,("glPointSize"))
GL_FUNCTION(LineWidth, void, (GLfloat width), (fARG1),,,("glLineWidth"))
GL_FUNCTION(LineStipple, void, (GLint factor, GLushort pattern), (ARG1, ARG2),,,("glLineStipple"))
GL_FUNCTION(GetPolygonStipple, void, (GLubyte* mask), (p), GLubyte buffer[128] = { 0 }; GLboolean b = PIXEL_PACK_BUFFER(); GLubyte* p=nullptr; if (b)p = (GLubyte*)pARG1; else p = buffer; , if (!b) marshalBackArray<GLubyte>(cpu, buffer, ARG1, 128); , ("glGetPolygonStipple"))
GL_FUNCTION(PolygonMode, void, (GLenum face, GLenum mode), (ARG1, ARG2),,,("glPolygonMode"))
GL_FUNCTION(PolygonOffset, void, (GLfloat factor, GLfloat units), (fARG1, fARG2),,,("glPolygonOffset"))
GL_FUNCTION(PolygonStipple, void, (const GLubyte *mask), (PIXEL_UNPACK_BUFFER()?(GLubyte*)pARG1:marshalArray<GLubyte>(cpu, ARG1, 128)),,,("glPolygonStipple"))
GL_FUNCTION(EdgeFlag, void, (GLboolean flag), (ARG1),,,("glEdgeFlag"))
GL_FUNCTION(EdgeFlagv, void, (const GLboolean *flag), (marshalArray<GLboolean>(cpu, ARG1, 1)),,,("glEdgeFlagv"))
GL_FUNCTION(Scissor, void, (GLint x, GLint y, GLsizei width, GLsizei height), (ARG1, ARG2, ARG3, ARG4),,,("glScissor"))
GL_FUNCTION(ClipPlane, void, (GLenum plane, const GLdouble *equation), (ARG1, marshalArray<GLdouble>(cpu, ARG2, 4)),,,("glClipPlane"))
GL_FUNCTION(GetClipPlane, void, (GLenum plane, GLdouble *equation), (ARG1, buffer.getPtr()), MarshalReadWrite<GLdouble> buffer(cpu, ARG2, 4);, ,("glGetClipPlane"))
GL_FUNCTION(DrawBuffer, void, (GLenum mode), (ARG1),,,("glDrawBuffer"))
GL_FUNCTION(ReadBuffer, void, (GLenum mode), (ARG1),,,("glReadBuffer"))
GL_FUNCTION(Enable, void, (GLenum cap), (ARG1),,,("glEnable"))
GL_FUNCTION(Disable, void, (GLenum cap), (ARG1),,,("glDisable"))
GL_FUNCTION_FMT(IsEnabled, GLboolean, (GLenum cap), (ARG1),EAX=,,("glIsEnabled cap=%d ret=%d", ARG1, EAX))
GL_FUNCTION(PushAttrib, void, (GLbitfield mask), (ARG1),,,("glPushAttrib"))
GL_FUNCTION(PopAttrib, void, (), (),,,("glPopAttrib"))
GL_FUNCTION(PushClientAttrib, void, (GLbitfield mask), (ARG1),,,("glPushClientAttrib"))
GL_FUNCTION(PopClientAttrib, void, (), (),,,("glPopClientAttrib"))
GL_FUNCTION(Hint, void, (GLenum target, GLenum mode), (ARG1, ARG2),,,("glHint"))
GL_FUNCTION(ClearDepth, void, (GLclampd depth), (dARG1),,,("glClearDepth"))
GL_FUNCTION(DepthFunc, void, (GLenum func), (ARG1),,,("glDepthFunc"))
GL_FUNCTION(DepthMask, void, (GLboolean flag), (ARG1),,,("glDepthMask"))
GL_FUNCTION(DepthRange, void, (GLclampd near_val, GLclampd far_val), (dARG1, dARG2),,,("glDepthRange"))
GL_FUNCTION(ClearAccum, void, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (fARG1, fARG2, fARG3, fARG4),,,("glClearAccum"))
GL_FUNCTION(Accum, void, (GLenum op, GLfloat value), (ARG1, fARG2),,,("glAccum"))
GL_FUNCTION(MatrixMode, void, (GLenum mode), (ARG1),,,("glMatrixMode"))
GL_FUNCTION(Ortho, void, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val), (dARG1, dARG2, dARG3, dARG4, dARG5, dARG6),,,("glOrtho"))
GL_FUNCTION(Frustum, void, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val), (dARG1, dARG2, dARG3, dARG4, dARG5, dARG6),,,("glFrustum"))
GL_FUNCTION(PushMatrix, void, (), (),,,("glPushMatrix"))
GL_FUNCTION(PopMatrix, void, (), (),,,("glPopMatrix"))
GL_FUNCTION(LoadIdentity, void, (), (),,,("glLoadIdentity"))
GL_FUNCTION(LoadMatrixd, void, (const GLdouble *m), (marshalArray<GLdouble>(cpu, ARG1, 16)),,,("glLoadMatrixd"))
GL_FUNCTION(LoadMatrixf, void, (const GLfloat *m), (marshalArray<GLfloat>(cpu, ARG1, 16)),,,("glLoadMatrixf"))
GL_FUNCTION(MultMatrixd, void, (const GLdouble *m), (marshalArray<GLdouble>(cpu, ARG1, 16)),,,("glMultMatrixd"))
GL_FUNCTION(MultMatrixf, void, (const GLfloat *m), (marshalArray<GLfloat>(cpu, ARG1, 16)),,,("glMultMatrixf"))
GL_FUNCTION(Rotated, void, (GLdouble angle, GLdouble x, GLdouble y, GLdouble z), (dARG1, dARG2, dARG3, dARG4),,,("glRotated"))
GL_FUNCTION(Rotatef, void, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z), (fARG1, fARG2, fARG3, fARG4),,,("glRotatef"))
GL_FUNCTION(Scaled, void, (GLdouble x, GLdouble y, GLdouble z), (dARG1, dARG2, dARG3),,,("glScaled"))
GL_FUNCTION(Scalef, void, (GLfloat x, GLfloat y, GLfloat z), (fARG1, fARG2, fARG3),,,("glScalef"))
GL_FUNCTION(Translated, void, (GLdouble x, GLdouble y, GLdouble z), (dARG1, dARG2, dARG3),,,("glTranslated"))
GL_FUNCTION(Translatef, void, (GLfloat x, GLfloat y, GLfloat z), (fARG1, fARG2, fARG3),,,("glTranslatef"))
GL_FUNCTION_FMT(IsList, GLboolean, (GLuint list), (ARG1),EAX=,,("glIsList list=%d ret=%d", ARG1, EAX))
GL_FUNCTION(DeleteLists, void, (GLuint list, GLsizei range), (ARG1, ARG2),,,("glDeleteLists"))
GL_FUNCTION_FMT(GenLists, GLuint, (GLsizei range), (ARG1),EAX=,,("glGenLists ret=%d",EAX))
GL_FUNCTION(NewList, void, (GLuint list, GLenum mode), (ARG1, ARG2),,,("glNewList"))
GL_FUNCTION(EndList, void, (), (),,,("glEndList"))
GL_FUNCTION(CallList, void, (GLuint list), (ARG1),,,("glCallList"))
GL_FUNCTION(CallLists, void, (GLsizei n, GLenum type, const GLvoid *lists), (ARG1, ARG2, marshalType(cpu, ARG2, ARG1, ARG3)),,,("glCallLists"))
GL_FUNCTION(ListBase, void, (GLuint base), (ARG1),,,("glListBase"))
GL_FUNCTION(Begin, void, (GLenum mode), (ARG1),,,("glBegin"))
GL_FUNCTION(End, void, (), (),,,("glEnd"))
GL_FUNCTION(Vertex2d, void, (GLdouble x, GLdouble y), (dARG1, dARG2),,,("glVertex2d"))
GL_FUNCTION(Vertex2f, void, (GLfloat x, GLfloat y), (fARG1, fARG2),,,("glVertex2f"))
GL_FUNCTION(Vertex2i, void, (GLint x, GLint y), (ARG1, ARG2),,,("glVertex2i"))
GL_FUNCTION(Vertex2s, void, (GLshort x, GLshort y), (ARG1, ARG2),,,("glVertex2s"))
GL_FUNCTION(Vertex3d, void, (GLdouble x, GLdouble y, GLdouble z), (dARG1, dARG2, dARG3),,,("glVertex3d"))
GL_FUNCTION(Vertex3f, void, (GLfloat x, GLfloat y, GLfloat z), (fARG1, fARG2, fARG3),,,("glVertex3f"))
GL_FUNCTION(Vertex3i, void, (GLint x, GLint y, GLint z), (ARG1, ARG2, ARG3),,,("glVertex3i"))
GL_FUNCTION(Vertex3s, void, (GLshort x, GLshort y, GLshort z), (ARG1, ARG2, ARG3),,,("glVertex3s"))
GL_FUNCTION(Vertex4d, void, (GLdouble x, GLdouble y, GLdouble z, GLdouble w), (dARG1, dARG2, dARG3, dARG4),,,("glVertex4d"))
GL_FUNCTION(Vertex4f, void, (GLfloat x, GLfloat y, GLfloat z, GLfloat w), (fARG1, fARG2, fARG3, fARG4),,,("glVertex4f"))
GL_FUNCTION(Vertex4i, void, (GLint x, GLint y, GLint z, GLint w), (ARG1, ARG2, ARG3, ARG4),,,("glVertex4i"))
GL_FUNCTION(Vertex4s, void, (GLshort x, GLshort y, GLshort z, GLshort w), (ARG1, ARG2, ARG3, ARG4),,,("glVertex4s"))
GL_FUNCTION(Vertex2dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 2)),,,("glVertex2dv"))
GL_FUNCTION(Vertex2fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 2)),,,("glVertex2fv"))
GL_FUNCTION(Vertex2iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 2)),,,("glVertex2iv"))
GL_FUNCTION(Vertex2sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 2)),,,("glVertex2sv"))
GL_FUNCTION(Vertex3dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 3)),,,("glVertex3dv"))
GL_FUNCTION(Vertex3fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 3)),,,("glVertex3fv"))
GL_FUNCTION(Vertex3iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 3)),,,("glVertex3iv"))
GL_FUNCTION(Vertex3sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 3)),,,("glVertex3sv"))
GL_FUNCTION(Vertex4dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 4)),,,("glVertex4dv"))
GL_FUNCTION(Vertex4fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 4)),,,("glVertex4fv"))
GL_FUNCTION(Vertex4iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 4)),,,("glVertex4iv"))
GL_FUNCTION(Vertex4sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 4)),,,("glVertex4sv"))
GL_FUNCTION(Normal3b, void, (GLbyte nx, GLbyte ny, GLbyte nz), (ARG1, ARG2, ARG3),,,("glNormal3b"))
GL_FUNCTION(Normal3d, void, (GLdouble nx, GLdouble ny, GLdouble nz), (dARG1, dARG2, dARG3),,,("glNormal3d"))
GL_FUNCTION(Normal3f, void, (GLfloat nx, GLfloat ny, GLfloat nz), (fARG1, fARG2, fARG3),,,("glNormal3f"))
GL_FUNCTION(Normal3i, void, (GLint nx, GLint ny, GLint nz), (ARG1, ARG2, ARG3),,,("glNormal3i"))
GL_FUNCTION(Normal3s, void, (GLshort nx, GLshort ny, GLshort nz), (ARG1, ARG2, ARG3),,,("glNormal3s"))
GL_FUNCTION(Normal3bv, void, (const GLbyte *v), (marshalArray<GLbyte>(cpu, ARG1, 3)),,,("glNormal3bv"))
GL_FUNCTION(Normal3dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 3)),,,("glNormal3dv"))
GL_FUNCTION(Normal3fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 3)),,,("glNormal3fv"))
GL_FUNCTION(Normal3iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 3)),,,("glNormal3iv"))
GL_FUNCTION(Normal3sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 3)),,,("glNormal3sv"))
GL_FUNCTION(Indexd, void, (GLdouble c), (dARG1),,,("glIndexd"))
GL_FUNCTION(Indexf, void, (GLfloat c), (fARG1),,,("glIndexf"))
GL_FUNCTION(Indexi, void, (GLint c), (ARG1),,,("glIndexi"))
GL_FUNCTION(Indexs, void, (GLshort c), (ARG1),,,("glIndexs"))
GL_FUNCTION(Indexub, void, (GLubyte c), (ARG1),,,("glIndexub"))
GL_FUNCTION(Indexdv, void, (const GLdouble *c), (marshalArray<GLdouble>(cpu, ARG1, 1)),,,("glIndexdv"))
GL_FUNCTION(Indexfv, void, (const GLfloat *c), (marshalArray<GLfloat>(cpu, ARG1, 1)),,,("glIndexfv"))
GL_FUNCTION(Indexiv, void, (const GLint *c), (marshalArray<GLint>(cpu, ARG1, 1)),,,("glIndexiv"))
GL_FUNCTION(Indexsv, void, (const GLshort *c), (marshalArray<GLshort>(cpu, ARG1, 1)),,,("glIndexsv"))
GL_FUNCTION(Indexubv, void, (const GLubyte *c), (marshalArray<GLubyte>(cpu, ARG1, 1)),,,("glIndexubv"))
GL_FUNCTION(Color3b, void, (GLbyte red, GLbyte green, GLbyte blue), (ARG1, ARG2, ARG3),,,("glColor3b"))
GL_FUNCTION(Color3d, void, (GLdouble red, GLdouble green, GLdouble blue), (dARG1, dARG2, dARG3),,,("glColor3d"))
GL_FUNCTION(Color3f, void, (GLfloat red, GLfloat green, GLfloat blue), (fARG1, fARG2, fARG3),,,("glColor3f"))
GL_FUNCTION(Color3i, void, (GLint red, GLint green, GLint blue), (ARG1, ARG2, ARG3),,,("glColor3i"))
GL_FUNCTION(Color3s, void, (GLshort red, GLshort green, GLshort blue), (ARG1, ARG2, ARG3),,,("glColor3s"))
GL_FUNCTION(Color3ub, void, (GLubyte red, GLubyte green, GLubyte blue), (ARG1, ARG2, ARG3),,,("glColor3ub"))
GL_FUNCTION(Color3ui, void, (GLuint red, GLuint green, GLuint blue), (ARG1, ARG2, ARG3),,,("glColor3ui"))
GL_FUNCTION(Color3us, void, (GLushort red, GLushort green, GLushort blue), (ARG1, ARG2, ARG3),,,("glColor3us"))
GL_FUNCTION(Color4b, void, (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColor4b"))
GL_FUNCTION(Color4d, void, (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha), (dARG1, dARG2, dARG3, dARG4),,,("glColor4d"))
GL_FUNCTION(Color4f, void, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (fARG1, fARG2, fARG3, fARG4),,,("glColor4f"))
GL_FUNCTION(Color4i, void, (GLint red, GLint green, GLint blue, GLint alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColor4i"))
GL_FUNCTION(Color4s, void, (GLshort red, GLshort green, GLshort blue, GLshort alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColor4s"))
GL_FUNCTION(Color4ub, void, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColor4ub"))
GL_FUNCTION(Color4ui, void, (GLuint red, GLuint green, GLuint blue, GLuint alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColor4ui"))
GL_FUNCTION(Color4us, void, (GLushort red, GLushort green, GLushort blue, GLushort alpha), (ARG1, ARG2, ARG3, ARG4),,,("glColor4us"))
GL_FUNCTION(Color3bv, void, (const GLbyte *v), (marshalArray<GLbyte>(cpu, ARG1, 3)),,,("glColor3bv"))
GL_FUNCTION(Color3dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 3)),,,("glColor3dv"))
GL_FUNCTION(Color3fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 3)),,,("glColor3fv"))
GL_FUNCTION(Color3iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 3)),,,("glColor3iv"))
GL_FUNCTION(Color3sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 3)),,,("glColor3sv"))
GL_FUNCTION(Color3ubv, void, (const GLubyte *v), (marshalArray<GLubyte>(cpu, ARG1, 3)),,,("glColor3ubv"))
GL_FUNCTION(Color3uiv, void, (const GLuint *v), (marshalArray<GLuint>(cpu, ARG1, 3)),,,("glColor3uiv"))
GL_FUNCTION(Color3usv, void, (const GLushort *v), (marshalArray<GLushort>(cpu, ARG1, 3)),,,("glColor3usv"))
GL_FUNCTION(Color4bv, void, (const GLbyte *v), (marshalArray<GLbyte>(cpu, ARG1, 4)),,,("glColor4bv"))
GL_FUNCTION(Color4dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 4)),,,("glColor4dv"))
GL_FUNCTION(Color4fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 4)),,,("glColor4fv"))
GL_FUNCTION(Color4iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 4)),,,("glColor4iv"))
GL_FUNCTION(Color4sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 4)),,,("glColor4sv"))
GL_FUNCTION(Color4ubv, void, (const GLubyte *v), (marshalArray<GLubyte>(cpu, ARG1, 4)),,,("glColor4ubv"))
GL_FUNCTION(Color4uiv, void, (const GLuint *v), (marshalArray<GLuint>(cpu, ARG1, 4)),,,("glColor4uiv"))
GL_FUNCTION(Color4usv, void, (const GLushort *v), (marshalArray<GLushort>(cpu, ARG1, 4)),,,("glColor4usv"))
GL_FUNCTION(TexCoord1d, void, (GLdouble s), (dARG1),,,("glTexCoord1d"))
GL_FUNCTION(TexCoord1f, void, (GLfloat s), (fARG1),,,("glTexCoord1f"))
GL_FUNCTION(TexCoord1i, void, (GLint s), (ARG1),,,("glTexCoord1i"))
GL_FUNCTION(TexCoord1s, void, (GLshort s), (ARG1),,,("glTexCoord1s"))
GL_FUNCTION(TexCoord2d, void, (GLdouble s, GLdouble t), (dARG1, dARG2),,,("glTexCoord2d"))
GL_FUNCTION(TexCoord2f, void, (GLfloat s, GLfloat t), (fARG1, fARG2),,,("glTexCoord2f"))
GL_FUNCTION(TexCoord2i, void, (GLint s, GLint t), (ARG1, ARG2),,,("glTexCoord2i"))
GL_FUNCTION(TexCoord2s, void, (GLshort s, GLshort t), (ARG1, ARG2),,,("glTexCoord2s"))
GL_FUNCTION(TexCoord3d, void, (GLdouble s, GLdouble t, GLdouble r), (dARG1, dARG2, dARG3),,,("glTexCoord3d"))
GL_FUNCTION(TexCoord3f, void, (GLfloat s, GLfloat t, GLfloat r), (fARG1, fARG2, fARG3),,,("glTexCoord3f"))
GL_FUNCTION(TexCoord3i, void, (GLint s, GLint t, GLint r), (ARG1, ARG2, ARG3),,,("glTexCoord3i"))
GL_FUNCTION(TexCoord3s, void, (GLshort s, GLshort t, GLshort r), (ARG1, ARG2, ARG3),,,("glTexCoord3s"))
GL_FUNCTION(TexCoord4d, void, (GLdouble s, GLdouble t, GLdouble r, GLdouble q), (dARG1, dARG2, dARG3, dARG4),,,("glTexCoord4d"))
GL_FUNCTION(TexCoord4f, void, (GLfloat s, GLfloat t, GLfloat r, GLfloat q), (fARG1, fARG2, fARG3, fARG4),,,("glTexCoord4f"))
GL_FUNCTION(TexCoord4i, void, (GLint s, GLint t, GLint r, GLint q), (ARG1, ARG2, ARG3, ARG4),,,("glTexCoord4i"))
GL_FUNCTION(TexCoord4s, void, (GLshort s, GLshort t, GLshort r, GLshort q), (ARG1, ARG2, ARG3, ARG4),,,("glTexCoord4s"))
GL_FUNCTION(TexCoord1dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 1)),,,("glTexCoord1dv"))
GL_FUNCTION(TexCoord1fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 1)),,,("glTexCoord1fv"))
GL_FUNCTION(TexCoord1iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 1)),,,("glTexCoord1iv"))
GL_FUNCTION(TexCoord1sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 1)),,,("glTexCoord1sv"))
GL_FUNCTION(TexCoord2dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 2)),,,("glTexCoord2dv"))
GL_FUNCTION(TexCoord2fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 2)),,,("glTexCoord2fv"))
GL_FUNCTION(TexCoord2iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 2)),,,("glTexCoord2iv"))
GL_FUNCTION(TexCoord2sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 2)),,,("glTexCoord2sv"))
GL_FUNCTION(TexCoord3dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 3)),,,("glTexCoord3dv"))
GL_FUNCTION(TexCoord3fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 3)),,,("glTexCoord3fv"))
GL_FUNCTION(TexCoord3iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 3)),,,("glTexCoord3iv"))
GL_FUNCTION(TexCoord3sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 3)),,,("glTexCoord3sv"))
GL_FUNCTION(TexCoord4dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 4)),,,("glTexCoord4dv"))
GL_FUNCTION(TexCoord4fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 4)),,,("glTexCoord4fv"))
GL_FUNCTION(TexCoord4iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 4)),,,("glTexCoord4iv"))
GL_FUNCTION(TexCoord4sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 4)),,,("glTexCoord4sv"))
GL_FUNCTION(RasterPos2d, void, (GLdouble x, GLdouble y), (dARG1, dARG2),,,("glRasterPos2d"))
GL_FUNCTION(RasterPos2f, void, (GLfloat x, GLfloat y), (fARG1, fARG2),,,("glRasterPos2f"))
GL_FUNCTION(RasterPos2i, void, (GLint x, GLint y), (ARG1, ARG2),,,("glRasterPos2i"))
GL_FUNCTION(RasterPos2s, void, (GLshort x, GLshort y), (ARG1, ARG2),,,("glRasterPos2s"))
GL_FUNCTION(RasterPos3d, void, (GLdouble x, GLdouble y, GLdouble z), (dARG1, dARG2, dARG3),,,("glRasterPos3d"))
GL_FUNCTION(RasterPos3f, void, (GLfloat x, GLfloat y, GLfloat z), (fARG1, fARG2, fARG3),,,("glRasterPos3f"))
GL_FUNCTION(RasterPos3i, void, (GLint x, GLint y, GLint z), (ARG1, ARG2, ARG3),,,("glRasterPos3s"))
GL_FUNCTION(RasterPos3s, void, (GLshort x, GLshort y, GLshort z), (ARG1, ARG2, ARG3),,,("glRasterPos3s"))
GL_FUNCTION(RasterPos4d, void, (GLdouble x, GLdouble y, GLdouble z, GLdouble w), (dARG1, dARG2, dARG3, dARG4),,,("glRasterPos4d"))
GL_FUNCTION(RasterPos4f, void, (GLfloat x, GLfloat y, GLfloat z, GLfloat w), (fARG1, fARG2, fARG3, fARG4),,,("glRasterPos4f"))
GL_FUNCTION(RasterPos4i, void, (GLint x, GLint y, GLint z, GLint w), (ARG1, ARG2, ARG3, ARG4),,,("glRasterPos4i"))
GL_FUNCTION(RasterPos4s, void, (GLshort x, GLshort y, GLshort z, GLshort w), (ARG1, ARG2, ARG3, ARG4),,,("glRasterPos4s"))
GL_FUNCTION(RasterPos2dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 2)),,,("glRasterPos2dv"))
GL_FUNCTION(RasterPos2fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 2)),,,("glRasterPos2fv"))
GL_FUNCTION(RasterPos2iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 2)),,,("glRasterPos2iv"))
GL_FUNCTION(RasterPos2sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 2)),,,("glRasterPos2sv"))
GL_FUNCTION(RasterPos3dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 3)),,,("glRasterPos3dv"))
GL_FUNCTION(RasterPos3fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 3)),,,("glRasterPos3fv"))
GL_FUNCTION(RasterPos3iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 3)),,,("glRasterPos3iv"))
GL_FUNCTION(RasterPos3sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 3)),,,("glRasterPos3sv"))
GL_FUNCTION(RasterPos4dv, void, (const GLdouble *v), (marshalArray<GLdouble>(cpu, ARG1, 4)),,,("glRasterPos4dv"))
GL_FUNCTION(RasterPos4fv, void, (const GLfloat *v), (marshalArray<GLfloat>(cpu, ARG1, 4)),,,("glRasterPos4fv"))
GL_FUNCTION(RasterPos4iv, void, (const GLint *v), (marshalArray<GLint>(cpu, ARG1, 4)),,,("glRasterPos4iv"))
GL_FUNCTION(RasterPos4sv, void, (const GLshort *v), (marshalArray<GLshort>(cpu, ARG1, 4)),,,("glRasterPos4sv"))
GL_FUNCTION(Rectd, void, (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2), (dARG1, dARG2, dARG3, dARG4),,,("glRectd"))
GL_FUNCTION(Rectf, void, (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2), (fARG1, fARG2, fARG3, fARG4),,,("glRectf"))
GL_FUNCTION(Recti, void, (GLint x1, GLint y1, GLint x2, GLint y2), (ARG1, ARG2, ARG3, ARG4),,,("glRecti"))
GL_FUNCTION(Rects, void, (GLshort x1, GLshort y1, GLshort x2, GLshort y2), (ARG1, ARG2, ARG3, ARG4),,,("glRects"))
GL_FUNCTION(Rectdv, void, (const GLdouble *v1, const GLdouble *v2), (marshalArray<GLdouble>(cpu, ARG1, 2), marshalArray<GLdouble>(cpu, ARG3, 2)),,,("glRectdv"))
GL_FUNCTION(Rectfv, void, (const GLfloat *v1, const GLfloat *v2), (marshalArray<GLfloat>(cpu, ARG1, 2), marshalArray<GLfloat>(cpu, ARG2, 2)),,,("glRectfv"))
GL_FUNCTION(Rectiv, void, (const GLint *v1, const GLint *v2), (marshalArray<GLint>(cpu, ARG1, 2), marshalArray<GLint>(cpu, ARG2, 2)),,,("glRectiv"))
GL_FUNCTION(Rectsv, void, (const GLshort *v1, const GLshort *v2), (marshalArray<GLshort>(cpu, ARG1, 2), marshalArray<GLshort>(cpu, ARG2, 2)),,,("glRectsv"))
GL_FUNCTION(ShadeModel, void, (GLenum mode), (ARG1),,,("glShadeModel"))
GL_FUNCTION(Lightf, void, (GLenum light, GLenum pname, GLfloat param), (ARG1, ARG2, fARG3),,,("glLightf"))
GL_FUNCTION(Lighti, void, (GLenum light, GLenum pname, GLint param), (ARG1, ARG2, ARG3),,,("glLighti"))
GL_FUNCTION_FMT(Lightfv, void, (GLenum light, GLenum pname, const GLfloat* params), (ARG1, ARG2, buffer), const GLfloat* buffer = marshalArray<GLfloat>(cpu, ARG3, glcommon_glLightv_size(ARG2)); , , ("glLightfv light=%s, pname=%s, params=%s", glcommon_glLightv_print_name(ARG1), glcommon_glLightv_print_pname(ARG2), glcommon_glLightv_print_buffer(ARG2, buffer)))
GL_FUNCTION(Lightiv, void, (GLenum light, GLenum pname, const GLint* params), (ARG1, ARG2, marshalArray<GLint>(cpu, ARG3, glcommon_glLightv_size(ARG2))), , , ("glLightiv"))
GL_FUNCTION(LightModelf, void, (GLenum pname, GLfloat param), (ARG1, fARG2), , , ("glLightModelf"))
GL_FUNCTION(LightModeli, void, (GLenum pname, GLint param), (ARG1, ARG2), , , ("glLightModeli"))
GL_FUNCTION(LightModelfv, void, (GLenum pname, const GLfloat* params), (ARG1, marshalArray<GLfloat>(cpu, ARG2, glcommon_glLightModelv_size(ARG1))), , , ("glLightModelfv"))
GL_FUNCTION(LightModeliv, void, (GLenum pname, const GLint* params), (ARG1, marshalArray<GLint>(cpu, ARG2, glcommon_glLightModelv_size(ARG1))), , , ("glLightModeliv"))
GL_FUNCTION(Materialf, void, (GLenum face, GLenum pname, GLfloat param), (ARG1, ARG2, fARG3), , , ("glMaterialf"))
GL_FUNCTION(Materiali, void, (GLenum face, GLenum pname, GLint param), (ARG1, ARG2, ARG3), , , ("glMateriali"))
GL_FUNCTION(Materialfv, void, (GLenum face, GLenum pname, const GLfloat* params), (ARG1, ARG2, marshalArray<GLfloat>(cpu, ARG3, glcommon_glMaterialv_size(ARG2))), , , ("glMaterialfv"))
GL_FUNCTION(Materialiv, void, (GLenum face, GLenum pname, const GLint* params), (ARG1, ARG2, marshalArray<GLint>(cpu, ARG3, glcommon_glMaterialv_size(ARG2))), , , ("glMaterialiv"))
GL_FUNCTION(ColorMaterial, void, (GLenum face, GLenum mode), (ARG1, ARG2), , , ("glColorMaterial"))
GL_FUNCTION(PixelZoom, void, (GLfloat xfactor, GLfloat yfactor), (fARG1, fARG2), , , ("glPixelZoom"))
GL_FUNCTION(PixelStoref, void, (GLenum pname, GLfloat param), (ARG1, fARG2), , , ("glPixelStoref"))
GL_FUNCTION_FMT(PixelStorei, void, (GLenum pname, GLint param), (ARG1, ARG2), , , ("glPixelStorei pname=%x param=%d", ARG1, ARG2))
GL_FUNCTION(PixelTransferf, void, (GLenum pname, GLfloat param), (ARG1, fARG2), , , ("glPixelTransferf"))
GL_FUNCTION(PixelTransferi, void, (GLenum pname, GLint param), (ARG1, ARG2), , , ("glPixelTransferi"))
GL_FUNCTION(PixelMapfv, void, (GLenum map, GLint mapsize, const GLfloat* values), (ARG1, ARG2, PIXEL_UNPACK_BUFFER() ? (GLfloat*)pARG3 : marshalArray<GLfloat>(cpu, ARG3, ARG2)), , , ("glPixelMapfv"))
GL_FUNCTION(PixelMapuiv, void, (GLenum map, GLint mapsize, const GLuint* values), (ARG1, ARG2, PIXEL_UNPACK_BUFFER() ? (GLuint*)pARG3 : marshalArray<GLuint>(cpu, ARG3, ARG2)), , , ("glPixelMapuiv"))
GL_FUNCTION(PixelMapusv, void, (GLenum map, GLint mapsize, const GLushort* values), (ARG1, ARG2, PIXEL_UNPACK_BUFFER() ? (GLushort*)pARG3 : marshalArray<GLushort>(cpu, ARG3, ARG2)), , , ("glPixelMapusv"))
GL_FUNCTION(Bitmap, void, (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap), (ARG1, ARG2, fARG3, fARG4, fARG5, fARG6, PIXEL_UNPACK_BUFFER() ? (GLubyte*)pARG7 : (GLubyte*)marshalPixels(cpu, 2, ARG1, ARG2, 1, GL_COLOR_INDEX, GL_BITMAP, ARG7)), , , ("glBitmap"))
GL_FUNCTION(DrawPixels, void, (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels), (ARG1, ARG2, ARG3, ARG4, PIXEL_UNPACK_BUFFER() ? (GLvoid*)pARG5 : marshalPixels(cpu, 2, ARG1, ARG2, 1, ARG3, ARG4, ARG5)), , , ("glDrawPixels"))
GL_FUNCTION(CopyPixels, void, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type), (ARG1, ARG2, ARG3, ARG4, ARG5), , , ("glCopyPixels"))
GL_FUNCTION(StencilFunc, void, (GLenum func, GLint ref, GLuint mask), (ARG1, ARG2, ARG3), , , ("glStencilFunc"))
GL_FUNCTION(StencilMask, void, (GLuint mask), (ARG1), , , ("glStencilMask"))
GL_FUNCTION(StencilOp, void, (GLenum fail, GLenum zfail, GLenum zpass), (ARG1, ARG2, ARG3), , , ("glStencilOp"))
GL_FUNCTION(ClearStencil, void, (GLint s), (ARG1), , , ("glClearStencil"))
GL_FUNCTION(TexGend, void, (GLenum coord, GLenum pname, GLdouble param), (ARG1, ARG2, dARG3), , , ("glTexGend"))
GL_FUNCTION(TexGenf, void, (GLenum coord, GLenum pname, GLfloat param), (ARG1, ARG2, fARG1), , , ("glTexGenf"))
GL_FUNCTION(TexGeni, void, (GLenum coord, GLenum pname, GLint param), (ARG1, ARG2, ARG3), , , ("glTexGeni"))
GL_FUNCTION(TexGendv, void, (GLenum coord, GLenum pname, const GLdouble* params), (ARG1, ARG2, marshalArray<GLdouble>(cpu, ARG3, (ARG2 == GL_OBJECT_PLANE || ARG2 == GL_EYE_PLANE) ? 4 : 1)), , , ("glTexGendv"))
GL_FUNCTION(TexGenfv, void, (GLenum coord, GLenum pname, const GLfloat* params), (ARG1, ARG2, marshalArray<GLfloat>(cpu, ARG3, (ARG2 == GL_OBJECT_PLANE || ARG2 == GL_EYE_PLANE) ? 4 : 1)), , , ("glTexGenfv"))
GL_FUNCTION(TexGeniv, void, (GLenum coord, GLenum pname, const GLint* params), (ARG1, ARG2, marshalArray<GLint>(cpu, ARG3, (ARG2 == GL_OBJECT_PLANE || ARG2 == GL_EYE_PLANE) ? 4 : 1)), , , ("glTexGeniv"))
GL_FUNCTION(TexEnvf, void, (GLenum target, GLenum pname, GLfloat param), (ARG1, ARG2, fARG3), , , ("glTexEnvf"))
GL_FUNCTION(TexEnvi, void, (GLenum target, GLenum pname, GLint param), (ARG1, ARG2, ARG3), , , ("glTexEnvi"))
GL_FUNCTION(TexEnvfv, void, (GLenum target, GLenum pname, const GLfloat* params), (ARG1, ARG2, marshalArray<GLfloat>(cpu, ARG3, (ARG2 == GL_TEXTURE_ENV_COLOR) ? 4 : 1)), , , ("glTexEnvfv"))
GL_FUNCTION(TexEnviv, void, (GLenum target, GLenum pname, const GLint* params), (ARG1, ARG2, marshalArray<GLint>(cpu, ARG3, (ARG2 == GL_TEXTURE_ENV_COLOR) ? 4 : 1)), , , ("glTexEnviv"))
GL_FUNCTION(TexParameterf, void, (GLenum target, GLenum pname, GLfloat param), (ARG1, ARG2, fARG3), , , ("glTexParameterf"))
GL_FUNCTION(TexParameteri, void, (GLenum target, GLenum pname, GLint param), (ARG1, ARG2, ARG3), , , ("glTexParameteri"))
GL_FUNCTION(TexParameterfv, void, (GLenum target, GLenum pname, const GLfloat* params), (ARG1, ARG2, marshalArray<GLfloat>(cpu, ARG3, (ARG2 == GL_TEXTURE_BORDER_COLOR) ? 4 : 1)), , , ("glTexParameterfv"))
GL_FUNCTION(TexParameteriv, void, (GLenum target, GLenum pname, const GLint* params), (ARG1, ARG2, marshalArray<GLint>(cpu, ARG3, (ARG2 == GL_TEXTURE_BORDER_COLOR) ? 4 : 1)), , , ("glTexParameteriv"))
GL_FUNCTION(TexImage1D, void, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, PIXEL_UNPACK_BUFFER() ? (GLvoid*)pARG8 : marshalPixels(cpu, ARG1 == 1, ARG4, 1, 1, ARG6, ARG7, ARG8)), , , ("glTexImage1D"))
GL_FUNCTION(TexImage2D, void, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, PIXEL_UNPACK_BUFFER() ? (GLvoid*)pARG9 : marshalPixels(cpu, 2, ARG4, ARG5, 1, ARG7, ARG8, ARG9)), , , ("glTexImage2D"))
GL_FUNCTION(Map1d, void, (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points), (ARG1, dARG2, dARG3, ARG4, ARG5, marshalArray<GLdouble>(cpu, ARG6, getMap1Count(ARG1)* ARG5)), , , ("glMap1d"))
GL_FUNCTION(Map1f, void, (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points), (ARG1, fARG2, fARG3, ARG4, ARG5, marshalArray<GLfloat>(cpu, ARG6, getMap1Count(ARG1)* ARG5)), , , ("glMap1f"))
GL_FUNCTION(Map2d, void, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points), (ARG1, dARG2, dARG3, ARG4, ARG5, dARG6, dARG7, ARG8, ARG9, marshalArray<GLdouble>(cpu, ARG10, getMap2Count(ARG1)* ARG5* ARG9)), , , ("glMap2d"))
GL_FUNCTION(Map2f, void, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points), (ARG1, fARG2, fARG3, ARG4, ARG5, fARG6, fARG7, ARG8, ARG9, marshalArray<GLfloat>(cpu, ARG10, getMap2Count(ARG1)* ARG5* ARG9)), , , ("glMap2f"))
GL_FUNCTION(EvalCoord1d, void, (GLdouble u), (dARG1), , , ("glEvalCoord1d"))
GL_FUNCTION(EvalCoord1f, void, (GLfloat u), (fARG1), , , ("glEvalCoord1f"))
GL_FUNCTION(EvalCoord1dv, void, (const GLdouble* u), (marshalArray<GLdouble>(cpu, ARG1, 1)), , , ("glEvalCoord1dv"))
GL_FUNCTION(EvalCoord1fv, void, (const GLfloat* u), (marshalArray<GLfloat>(cpu, ARG1, 1)), , , ("glEvalCoord1fv"))
GL_FUNCTION(EvalCoord2d, void, (GLdouble u, GLdouble v), (dARG1, dARG2), , , ("glEvalCoord2d"))
GL_FUNCTION(EvalCoord2f, void, (GLfloat u, GLfloat v), (fARG1, fARG2), , , ("glEvalCoord2f"))
GL_FUNCTION(EvalCoord2dv, void, (const GLdouble* u), (marshalArray<GLdouble>(cpu, ARG1, 2)), , , ("glEvalCoord2dv"))
GL_FUNCTION(EvalCoord2fv, void, (const GLfloat* u), (marshalArray<GLfloat>(cpu, ARG1, 2)), , , ("glEvalCoord2fv"))
GL_FUNCTION(MapGrid1d, void, (GLint un, GLdouble u1, GLdouble u2), (ARG1, dARG2, dARG3), , , ("glMapGrid1d"))
GL_FUNCTION(MapGrid1f, void, (GLint un, GLfloat u1, GLfloat u2), (ARG1, fARG2, fARG3), , , ("glMapGrid1f"))
GL_FUNCTION(MapGrid2d, void, (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2), (ARG1, dARG2, dARG3, ARG4, dARG5, dARG6), , , ("glMapGrid2d"))
GL_FUNCTION(MapGrid2f, void, (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2), (ARG1, fARG2, fARG3, ARG4, fARG5, fARG6), , , ("glMapGrid2f"))
GL_FUNCTION(EvalPoint1, void, (GLint i), (ARG1), , , ("glEvalPoint1"))
GL_FUNCTION(EvalPoint2, void, (GLint i, GLint j), (ARG1, ARG2), , , ("glEvalPoint2"))
GL_FUNCTION(EvalMesh1, void, (GLenum mode, GLint i1, GLint i2), (ARG1, ARG2, ARG3), , , ("glEvalMesh1"))
GL_FUNCTION(EvalMesh2, void, (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2), (ARG1, ARG2, ARG3, ARG4, ARG5), , , ("glEvalMesh2"))
GL_FUNCTION(Fogf, void, (GLenum pname, GLfloat param), (ARG1, fARG2), , , ("glFogf"))
GL_FUNCTION(Fogi, void, (GLenum pname, GLint param), (ARG1, ARG2), , , ("glFogi"))
GL_FUNCTION(Fogfv, void, (GLenum pname, const GLfloat* params), (ARG1, marshalArray<GLfloat>(cpu, ARG2, (ARG1 == GL_FOG_COLOR) ? 4 : 1)), , , ("glFogfv"))
GL_FUNCTION(Fogiv, void, (GLenum pname, const GLint* params), (ARG1, marshalArray<GLint>(cpu, ARG2, (ARG1 == GL_FOG_COLOR) ? 4 : 1)), , , ("glFogiv"))
GL_FUNCTION(PassThrough, void, (GLfloat token), (fARG1), , , ("glPassThrough"))
GL_FUNCTION(InitNames, void, (void), (), , , ("glInitNames"))
GL_FUNCTION(LoadName, void, (GLuint name), (ARG1), , , ("glLoadName"))
GL_FUNCTION(PushName, void, (GLuint name), (ARG1), , , ("glPushName"))
GL_FUNCTION(PopName, void, (void), (), , , ("glPopName"))
GL_FUNCTION(DeleteTextures, void, (GLsizei n, const GLuint* textures), (ARG1, marshalArray<GLuint>(cpu, ARG2, ARG1)), , , ("glDeleteTextures"))
GL_FUNCTION(BindTexture, void, (GLenum target, GLuint texture), (ARG1, ARG2), , , ("glBindTexture"))
GL_FUNCTION(PrioritizeTextures, void, (GLsizei n, const GLuint* textures, const GLclampf* priorities), (ARG1, marshalArray<GLuint>(cpu, ARG2, ARG1), marshalArray<GLfloat>(cpu, ARG3, ARG1)), , , ("glPrioritizeTextures"))
GL_FUNCTION(IsTexture, GLboolean, (GLuint texture), (ARG1), EAX=, , ("glIsTexture"))
GL_FUNCTION(TexSubImage1D, void, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, PIXEL_UNPACK_BUFFER() ? (GLvoid*)pARG7 : marshalPixels(cpu, 1, ARG4, 1, 1, ARG5, ARG6, ARG7)), , , ("glTexSubImage1D"))
GL_FUNCTION(CopyTexImage1D, void, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), , , ("glCopyTexImage1D"))
GL_FUNCTION(CopyTexImage2D, void, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), , , ("glCopyTexImage2D"))
GL_FUNCTION(CopyTexSubImage1D, void, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), , , ("glCopyTexSubImage1D"))
GL_FUNCTION(CopyTexSubImage2D, void, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height), (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), , , ("glCopyTexSubImage2D"))
GL_FUNCTION(ArrayElement, void, (GLint i), (ARG1), updateVertexPointers(cpu, ARG1); , , ("glArrayElement"))
GL_FUNCTION_FMT(DrawArrays, void, (GLenum mode, GLint first, GLsizei count), (ARG1, ARG2, ARG3), updateVertexPointers(cpu, ARG2+ARG3); , , ("glDrawArrays mode=%d first=%d count=%d", ARG1, ARG2, ARG3))
GL_FUNCTION(VertexPointer, void, (GLint size, GLenum type, GLsizei stride, const GLvoid* ptr), (ARG1, ARG2, ARG3, marshalVetextPointer(cpu, 0, GL_FALSE, ARG1, ARG2, ARG3, ARG4)), , , ("glVertexPointer"))
GL_FUNCTION(NormalPointer, void, (GLenum type, GLsizei stride, const GLvoid* ptr), (ARG1, ARG2, marshalNormalPointer(cpu, ARG1, ARG2, ARG3)), , , ("glNormalPointer"))
GL_FUNCTION(ColorPointer, void, (GLint size, GLenum type, GLsizei stride, const GLvoid* ptr), (ARG1, ARG2, ARG3, marshalColorPointer(cpu, ARG1, ARG2, ARG3, ARG4)), , , ("glColorPointer"))
GL_FUNCTION(IndexPointer, void, (GLenum type, GLsizei stride, const GLvoid* ptr), (ARG1, ARG2, marshalIndexPointer(cpu, ARG1, ARG2, ARG3)), , , ("glIndexPointer"))
GL_FUNCTION(TexCoordPointer, void, (GLint size, GLenum type, GLsizei stride, const GLvoid* ptr), (ARG1, ARG2, ARG3, marshalTexCoordPointer(cpu, ARG1, ARG2, ARG3, ARG4)), , , ("glTexCoordPointer"))
GL_FUNCTION(EdgeFlagPointer, void, (GLsizei stride, const GLvoid* ptr), (ARG1, marshalEdgeFlagPointer(cpu, ARG1, ARG2)), , , ("glEdgeFlagPointer"))
GL_FUNCTION_CUSTOM(GetString, const GLubyte*, (GLenum name))
GL_FUNCTION_CUSTOM(GetTexImage, void, (GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels))
GL_FUNCTION_CUSTOM(GetMapdv, void, (GLenum target, GLenum query, GLdouble* v))
GL_FUNCTION_CUSTOM(GetMapfv, void, (GLenum target, GLenum query, GLfloat* v))
GL_FUNCTION_CUSTOM(GetMapiv, void, (GLenum target, GLenum query, GLint* v))
GL_FUNCTION_CUSTOM(GetPointerv, void, (GLenum pname, GLvoid** params))
GL_FUNCTION_CUSTOM(ReadPixels, void, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels))
GL_FUNCTION_CUSTOM(InterleavedArrays, void, (GLenum format, GLsizei stride, const GLvoid* pointer))
GL_FUNCTION_CUSTOM(Viewport, void, (GLint x, GLint y, GLsizei width, GLsizei height))
GL_FUNCTION_CUSTOM(FeedbackBuffer, void, (GLsizei size, GLenum type, GLfloat* buffer))
GL_FUNCTION_CUSTOM(SelectBuffer, void, (GLsizei size, GLuint* buffer))
GL_FUNCTION_CUSTOM(RenderMode, GLint, (GLenum mode))
GL_FUNCTION_CUSTOM(DrawElements, void, (GLenum mode, GLsizei count, GLenum type, const GLvoid* indices));
GL_FUNCTION_CUSTOM(GetIntegerv, void, (GLenum pname, GLint* params))
GL_FUNCTION_CUSTOM(GetError, GLenum, ())
GL_FUNCTION_CUSTOM(DisableClientState, void, (GLenum cap))
GL_FUNCTION_CUSTOM(EnableClientState, void, (GLenum cap))
GL_FUNCTION_CUSTOM(TexSubImage2D, void, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels))

GL_FUNCTION(GetTexGendv, void, (GLenum coord, GLenum pname, GLdouble *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLdouble> buffer(cpu, ARG3, 1);, ,("glGetTexGendv"))
GL_FUNCTION(GetTexGenfv, void, (GLenum coord, GLenum pname, GLfloat *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG3, 1);, ,("glGetTexGenfv"))
GL_FUNCTION(GetTexGeniv, void, (GLenum coord, GLenum pname, GLint *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLint> buffer(cpu, ARG3, 1);, ,("glGetTexGeniv"))
GL_FUNCTION(GetTexEnvfv, void, (GLenum target, GLenum pname, GLfloat *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG3, 1);, ,("glGetTexEnvfv"))
GL_FUNCTION(GetTexEnviv, void, (GLenum target, GLenum pname, GLint *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLint> buffer(cpu, ARG3, 1);, ,("glGetTexEnviv"))
GL_FUNCTION(GetTexParameterfv, void, (GLenum target, GLenum pname, GLfloat *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG3, 1);, ,("glGetTexParameterfv"))
GL_FUNCTION(GetTexParameteriv, void, (GLenum target, GLenum pname, GLint *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLint> buffer(cpu, ARG3, 1);, ;,("glGetTexParameteriv"))
GL_FUNCTION(GetTexLevelParameterfv, void, (GLenum target, GLint level, GLenum pname, GLfloat *params), (ARG1, ARG2, ARG3, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG4, 1);, ,("glGetTexLevelParameterfv"))
GL_FUNCTION(GetTexLevelParameteriv, void, (GLenum target, GLint level, GLenum pname, GLint *params), (ARG1, ARG2, ARG3, buffer.getPtr()), MarshalReadWrite<GLint> buffer(cpu, ARG4, 1);, ,("glGetTexLevelParameteriv"))

GL_FUNCTION(AreTexturesResident, GLboolean, (GLsizei n, const GLuint *textures, GLboolean *residences), (ARG1, marshalArray<GLuint>(cpu, ARG2, ARG1), buffer.getPtr()), MarshalReadWrite<GLboolean> buffer(cpu, ARG3, ARG1);,,("glAreTexturesResident"))
GL_FUNCTION(GenTextures, void, (GLsizei n, GLuint *textures), (ARG1, buffer.getPtr()), MarshalReadWrite<GLuint> buffer(cpu, ARG2, ARG1);, ,("glGenTextures"))

GL_FUNCTION(GetBooleanv, void, (GLenum pname, GLboolean *params), (ARG1, rw.getPtr()), MarshalReadWrite<GLboolean> rw(cpu, ARG2, getSize(ARG1));, ,("glGetBooleanv"))
GL_FUNCTION(GetDoublev, void, (GLenum pname, GLdouble *params), (ARG1, buffer.getPtr()), MarshalReadWrite<GLdouble> buffer(cpu, ARG2, getSize(ARG1));, ,("glGetDoublev"))
GL_FUNCTION(GetFloatv, void, (GLenum pname, GLfloat *params), (ARG1, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG2, getSize(ARG1));, ,("glGetFloatv"))
GL_FUNCTION(GetLightfv, void, (GLenum light, GLenum pname, GLfloat *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG3, glcommon_glLightv_size(ARG2));, ,("glGetLightfv"))
GL_FUNCTION(GetLightiv, void, (GLenum light, GLenum pname, GLint *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLint> buffer(cpu, ARG3, glcommon_glLightv_size(ARG2));, ,("glGetLightiv"))
GL_FUNCTION(GetMaterialfv, void, (GLenum face, GLenum pname, GLfloat *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLfloat> buffer(cpu, ARG3, glcommon_glMaterialv_size(ARG2));, ,("glGetMaterialfv"))
GL_FUNCTION(GetMaterialiv, void, (GLenum face, GLenum pname, GLint *params), (ARG1, ARG2, buffer.getPtr()), MarshalReadWrite<GLint> buffer(cpu, ARG3, glcommon_glMaterialv_size(ARG2));, ,("glGetMaterialiv"))
GL_FUNCTION(GetPixelMapfv, void, (GLenum map, GLfloat *values), (ARG1, buffer.getPtr()), MarshalReadWritePacked<GLfloat> buffer(cpu, ARG2, glcommon_glGetPixelMap_size(ARG1));, ,("glGetPixelMapfv"))
GL_FUNCTION(GetPixelMapuiv, void, (GLenum map, GLuint * values), (ARG1, buffer.getPtr()), MarshalReadWritePacked<GLuint> buffer(cpu, ARG2, [cpu]() {return glcommon_glGetPixelMap_size(ARG1);}); , , ("glGetPixelMapuiv"))
GL_FUNCTION(GetPixelMapusv, void, (GLenum map, GLushort *values), (ARG1, buffer.getPtr()), MarshalReadWritePacked<GLushort> buffer(cpu, ARG2, glcommon_glGetPixelMap_size(ARG1));, ,("glGetPixelMapusv"))

GL_EXT_FUNCTION(SamplePass, void, (GLenum pass))
GL_EXT_FUNCTION(GetStringi, const GLubyte*, (GLenum name, GLuint index))

#include "glfunctions_ext.h"
