SDL2             This will cause SDL2 to be used instead of SDL1.  You will need to link to the correct libraries.
UNALIGNED_MEMORY This is necessary if the host isn't little endian, necessary for asm.js (but not WASM)
BOXEDWINE_64BIT_MMU    This will reserve 4GB of memory for each emulated process so that emulated memory can be mapped to host memory with a single offset.  Currently only Win64 build supports this.
BOXEDWINE_VM     Requires: BOXEDWINE_64BIT_MMU. Translates x86 machine code to x64 on the fly.  Only supported on the Win64 build.
BOXEDWINE_ZLIB   Will allow the file system to be in a zip file (-zip command line argument).  This requires that you link against zlib.
BOXEDWINE_HAS_SETJMP  Will allow memory exception to be caught, this should be used for all builds.  Emscripten doesn't use it because it slows things down, but this also means some games won't work.
BOXEDWINE_MSVC   Should use this on Windows platform

To compile, you need one and only one of the follow 2 flags

BOXEDWINE_ES     SDL OpenGL ES code will be used.  OpenGL calls will be translated to ES.
BOXEDWINE_SDL    SDL OpenGL context will be used

To compile for Windows it is recommended to use Visual Studio 2013 Community Edition
https://www.visualstudio.com/en-us/news/releasenotes/vs2013-community-vs

Javascript


buildjsfs.sh/boxedwine-shell.js/shellfs.html
2 options for setting variable Config.storageMode:
- STORAGE_LOCAL_STORAGE
- STORAGE_MEMORY (default)

parameters:
 - specify an alternate root zip file system.
 	i.e. root=win32.zip. If not set it is assumed the root fs is boxedwine.zip.
 - specify a zip file to appear uncompressed underneath d:
 	i.e. app=chomp.zip
 - change the program to execute via ?p=/chomp/CHOMP.EXE. surround in quotes if path includes spaces.
 - set the working directory via ?w=chomp. This simplifies p as it can then be relative to the working directory.
 - add extra files via ?extra=fonts.zip;directx.zip where each zip file contains additional files to add to the root file system.
 - use c:/ & d:/ as shorthand
 - specify cpu emulated via ?cpu=p2 or cpu=p3
 - enable/disable sound via ?sound=false

Some simplifications are possible:
boxedwine.html?p=notepad - run notepad in the root fs
boxedwine.html?root=win32&app=chomp&w=chomp&p=CHOMP.EXE - no need to add .zip for root and app zip file name
boxedwine.html?app=chomp&p=CHOMP.EXE - if p does not start with a ‘/‘ and app is set, then the working directory is set to dir + app


As a boxedwine WINE filesystem can be quite large it makes sense to store only the minimum number of files and augment with files from the network.
This is achieved via the &ondemand parameter, but is only available if the web server supports range requests.
i.e.
&root=min-wine&ondemand-root=wine-full

The files in the above wine-full will be downloaded synchronously on demand. This will block the UI thread and also potentially crash the emulator when retrieving large files.
To generate your own minimal set of files follow the instructions in /tools/common/Main.java
*WARNING* use ONLY the linux/mac zip from the command line to produce the ondemand-root filesystem.

Other configuration options:
AUTO_RUN - indicates if start button is shown or page auto-runs. default true
ALLOW_PARAM_OVERRIDE_FROM_URL - indicates if the url can be appended with params as above for app, p.


other dials/tweaks for emscripten build files.
see var Module inside the html file.

misc notes:
You can avoid using url parameters and hardcode the values straight into the html file.  Search for MANUAL: in html file. 

Drag and drop is supported. Set AUTO_RUN to false. Simply drag a directory into the page. A dialog will appear and list entries for all executable files found. 
Getting files into/out of the emulator is provided behind the SHOW_UPLOAD_DOWNLOAD flag in the html. Jszip is used to expand a directory and also to download a directory as an archive.
By default uploading/downloading occurs inside d:
